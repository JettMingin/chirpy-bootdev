// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, pw_hash)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, pw_hash
`

type CreateUserParams struct {
	Email  string
	PwHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PwHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PwHash,
	)
	return i, err
}

const lookupUser = `-- name: LookupUser :one
SELECT id, created_at, updated_at, email, pw_hash FROM users WHERE email = $1
`

func (q *Queries) LookupUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, lookupUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PwHash,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
DELETE FROM users *
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}
